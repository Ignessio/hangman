class Game
  # Количество допустимых ошибок
  TOTAL_ERRORS_ALLOWED = 7

  # Конструктор класса Game на вход получает строку с загаданным словом.
  #
  # принимаем слово
  # разбиваем его на буквы
  # собираем массив из букв
  # создаем пустой массив игрока
  def initialize(word)
    @letters = word.upcase.chars
    @user_guesses = []
  end

  # принимаем на вход любой массив букв
  # берем из него каждую букву
  # передаем её в нормализатор
  # принимаем нормализованную букву
  # собираем новый нормализованный массив (в нем нет Ё, Й)
  def normalized_letters
    @letters.map { |letter| normalize_letter(letter) }
  end

  # принимаем на вход букву от метода, собирающего нормализованный массив
  # меняем Ё на Е и возвращаем её обратно
  # меняем Й на И и возвращаем её обратно
  # остальные буквы возвращаем без изменений
  def normalize_letter(letter)
    case letter
    when "Ё"
      "Е"
    when "Й"
      "И"
    else
      letter
    end
  end

  # нормализуем массив игрока (все Ё становсят Е, а Й - И)
  # нормализуем массив слова (все Ё становсят Е, а Й - И)
  # вычитаем из массива игрока массив слова
  # получаем новый массив
  # в новый массив возвращаем только те буквы из массива игрока,
  # которых нет в массиве слова
  def errors
    @user_guesses - normalized_letters
  end

  # количество ошибок = размер массива из метода errors
  def errors_made
    errors.length
  end

  # считаем сколько осталось сделать ошибок
  # от 7 отнять errors.length
  def errors_allowed
    TOTAL_ERRORS_ALLOWED - errors_made
  end

  # берем массив слова
  # берем из него каждую букву
  # если нормализованне буквы из массива игрока и массива слова равны
  # возвращаем исходную букву из массива слова без изменений
  # иначе вернем nil
  # эта переменная будет использоваться для вывода слова с прочерками
  def letters_to_guess
    result =
      @letters.map do |letter|
        if @user_guesses.include?(normalize_letter(letter))
          letter
        end
      end
    result
  end

  # Возвращаем true, если у пользователя не осталось ошибок, т.е. игра проиграна
  def lost?
    errors_allowed.zero?
  end

  # Возвращаем true, если игра закончена независимо от выигрыша
  def over?
    won? || lost?
  end

  # По сути, это основной игровой метод, типа "сыграть букву"
  #
  # если игра не закончена
  # и если нормализованной буквы нет в массиве игрока
  # добавляем в массив игрока нормализованную букву
  def play!(letter)
    if !over? && !@user_guesses.include?(normalize_letter(letter))
      @user_guesses << normalize_letter(letter)
    end
  end

  # Возвращает true, если не осталось неотгаданных букв (пользователь выиграл)
  # в массиве игрока будут только нормализованные буквы, поэтому
  # нормализуем массив слова и сравниваем с массивом игрока
  # если массивы равны, вернем true
  def won?
    (normalized_letters - @user_guesses).empty?
  end

  # Возвращает загаданное слово, склеивая его из букв массива слова
  def word
    @letters.join
  end
end
